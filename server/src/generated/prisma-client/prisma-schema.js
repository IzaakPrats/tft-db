module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHero {
  count: Int!
}

type AggregateHeroType {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Hero {
  id: ID!
  name: String!
  tier: Int!
  origin: HeroType!
  clazz: HeroType!
  tertiaryType: HeroType
}

type HeroConnection {
  pageInfo: PageInfo!
  edges: [HeroEdge]!
  aggregate: AggregateHero!
}

input HeroCreateInput {
  id: ID
  name: String!
  tier: Int!
  origin: HeroTypeCreateOneInput!
  clazz: HeroTypeCreateOneInput!
  tertiaryType: HeroTypeCreateOneInput
}

type HeroEdge {
  node: Hero!
  cursor: String!
}

enum HeroOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  tier_ASC
  tier_DESC
}

type HeroPreviousValues {
  id: ID!
  name: String!
  tier: Int!
}

type HeroSubscriptionPayload {
  mutation: MutationType!
  node: Hero
  updatedFields: [String!]
  previousValues: HeroPreviousValues
}

input HeroSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HeroWhereInput
  AND: [HeroSubscriptionWhereInput!]
  OR: [HeroSubscriptionWhereInput!]
  NOT: [HeroSubscriptionWhereInput!]
}

type HeroType {
  id: ID!
  name: String!
  heroTypeType: HeroTypeType!
}

type HeroTypeConnection {
  pageInfo: PageInfo!
  edges: [HeroTypeEdge]!
  aggregate: AggregateHeroType!
}

input HeroTypeCreateInput {
  id: ID
  name: String!
  heroTypeType: HeroTypeType!
}

input HeroTypeCreateOneInput {
  create: HeroTypeCreateInput
  connect: HeroTypeWhereUniqueInput
}

type HeroTypeEdge {
  node: HeroType!
  cursor: String!
}

enum HeroTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  heroTypeType_ASC
  heroTypeType_DESC
}

type HeroTypePreviousValues {
  id: ID!
  name: String!
  heroTypeType: HeroTypeType!
}

type HeroTypeSubscriptionPayload {
  mutation: MutationType!
  node: HeroType
  updatedFields: [String!]
  previousValues: HeroTypePreviousValues
}

input HeroTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HeroTypeWhereInput
  AND: [HeroTypeSubscriptionWhereInput!]
  OR: [HeroTypeSubscriptionWhereInput!]
  NOT: [HeroTypeSubscriptionWhereInput!]
}

enum HeroTypeType {
  ORIGIN
  CLASS
}

input HeroTypeUpdateDataInput {
  name: String
  heroTypeType: HeroTypeType
}

input HeroTypeUpdateInput {
  name: String
  heroTypeType: HeroTypeType
}

input HeroTypeUpdateManyMutationInput {
  name: String
  heroTypeType: HeroTypeType
}

input HeroTypeUpdateOneInput {
  create: HeroTypeCreateInput
  update: HeroTypeUpdateDataInput
  upsert: HeroTypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: HeroTypeWhereUniqueInput
}

input HeroTypeUpdateOneRequiredInput {
  create: HeroTypeCreateInput
  update: HeroTypeUpdateDataInput
  upsert: HeroTypeUpsertNestedInput
  connect: HeroTypeWhereUniqueInput
}

input HeroTypeUpsertNestedInput {
  update: HeroTypeUpdateDataInput!
  create: HeroTypeCreateInput!
}

input HeroTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  heroTypeType: HeroTypeType
  heroTypeType_not: HeroTypeType
  heroTypeType_in: [HeroTypeType!]
  heroTypeType_not_in: [HeroTypeType!]
  AND: [HeroTypeWhereInput!]
  OR: [HeroTypeWhereInput!]
  NOT: [HeroTypeWhereInput!]
}

input HeroTypeWhereUniqueInput {
  id: ID
  name: String
}

input HeroUpdateInput {
  name: String
  tier: Int
  origin: HeroTypeUpdateOneRequiredInput
  clazz: HeroTypeUpdateOneRequiredInput
  tertiaryType: HeroTypeUpdateOneInput
}

input HeroUpdateManyMutationInput {
  name: String
  tier: Int
}

input HeroWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  tier: Int
  tier_not: Int
  tier_in: [Int!]
  tier_not_in: [Int!]
  tier_lt: Int
  tier_lte: Int
  tier_gt: Int
  tier_gte: Int
  origin: HeroTypeWhereInput
  clazz: HeroTypeWhereInput
  tertiaryType: HeroTypeWhereInput
  AND: [HeroWhereInput!]
  OR: [HeroWhereInput!]
  NOT: [HeroWhereInput!]
}

input HeroWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createHero(data: HeroCreateInput!): Hero!
  updateHero(data: HeroUpdateInput!, where: HeroWhereUniqueInput!): Hero
  updateManyHeroes(data: HeroUpdateManyMutationInput!, where: HeroWhereInput): BatchPayload!
  upsertHero(where: HeroWhereUniqueInput!, create: HeroCreateInput!, update: HeroUpdateInput!): Hero!
  deleteHero(where: HeroWhereUniqueInput!): Hero
  deleteManyHeroes(where: HeroWhereInput): BatchPayload!
  createHeroType(data: HeroTypeCreateInput!): HeroType!
  updateHeroType(data: HeroTypeUpdateInput!, where: HeroTypeWhereUniqueInput!): HeroType
  updateManyHeroTypes(data: HeroTypeUpdateManyMutationInput!, where: HeroTypeWhereInput): BatchPayload!
  upsertHeroType(where: HeroTypeWhereUniqueInput!, create: HeroTypeCreateInput!, update: HeroTypeUpdateInput!): HeroType!
  deleteHeroType(where: HeroTypeWhereUniqueInput!): HeroType
  deleteManyHeroTypes(where: HeroTypeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  hero(where: HeroWhereUniqueInput!): Hero
  heroes(where: HeroWhereInput, orderBy: HeroOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hero]!
  heroesConnection(where: HeroWhereInput, orderBy: HeroOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HeroConnection!
  heroType(where: HeroTypeWhereUniqueInput!): HeroType
  heroTypes(where: HeroTypeWhereInput, orderBy: HeroTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HeroType]!
  heroTypesConnection(where: HeroTypeWhereInput, orderBy: HeroTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HeroTypeConnection!
  node(id: ID!): Node
}

type Subscription {
  hero(where: HeroSubscriptionWhereInput): HeroSubscriptionPayload
  heroType(where: HeroTypeSubscriptionWhereInput): HeroTypeSubscriptionPayload
}
`
      }
